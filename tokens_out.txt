Token {  word: \n  type: LIME_NEWLINE}
Token {  word: \n  type: LIME_NEWLINE}
Token {  word: \n  type: LIME_NEWLINE}
Token {  word: \n  type: LIME_NEWLINE}
Token {  word: Add  type: LIME_IDENTIFIER}
Token {  word:    type: LIME_WHITESPACE}
Token {  word: proc  type: LIME_PROC}
Token {  word: (  type: LIME_OPEN_PAREN}
Token {  word: a  type: LIME_IDENTIFIER}
Token {  word:    type: LIME_WHITESPACE}
Token {  word: int  type: LIME_TYPE_IDENTIFIER}
Token {  word: ,  type: LIME_COMMA}
Token {  word:    type: LIME_WHITESPACE}
Token {  word: b  type: LIME_IDENTIFIER}
Token {  word:    type: LIME_WHITESPACE}
Token {  word: int  type: LIME_TYPE_IDENTIFIER}
Token {  word: )  type: LIME_CLOSE_PAREN}
Token {  word:    type: LIME_WHITESPACE}
Token {  word: int  type: LIME_TYPE_IDENTIFIER}
Token {  word:    type: LIME_WHITESPACE}
Token {  word: {  type: }
Token {  word: \n  type: LIME_NEWLINE}
Token {  word:    type: LIME_WHITESPACE}
Token {  word:    type: LIME_WHITESPACE}
Token {  word:    type: LIME_WHITESPACE}
Token {  word:    type: LIME_WHITESPACE}
Token {  word: ret  type: LIME_RETURN}
Token {  word:    type: LIME_WHITESPACE}
Token {  word: a  type: LIME_IDENTIFIER}
Token {  word:    type: LIME_WHITESPACE}
Token {  word: +  type: LIME_OPERATOR}
Token {  word:    type: LIME_WHITESPACE}
Token {  word: b  type: LIME_IDENTIFIER}
Token {  word: \n  type: LIME_NEWLINE}
Token {  word: }  type: }
Token {  word: \n  type: LIME_NEWLINE}
Token {  word: \n  type: LIME_NEWLINE}
Token {  word: Test  type: LIME_IDENTIFIER}
Token {  word:    type: LIME_WHITESPACE}
Token {  word: proc  type: LIME_PROC}
Token {  word:    type: LIME_WHITESPACE}
Token {  word: {  type: }
Token {  word: \n  type: LIME_NEWLINE}
Token {  word: \n  type: LIME_NEWLINE}
Token {  word: }  type: }
Token {  word: \n  type: LIME_NEWLINE}
Token {  word: \n  type: LIME_NEWLINE}
Token {  word: myVar  type: LIME_IDENTIFIER}
Token {  word:    type: LIME_WHITESPACE}
Token {  word: int  type: LIME_TYPE_IDENTIFIER}
Token {  word:    type: LIME_WHITESPACE}
Token {  word: =  type: LIME_OPERATOR}
Token {  word:    type: LIME_WHITESPACE}
Token {  word: Add  type: LIME_IDENTIFIER}
Token {  word: (  type: LIME_OPEN_PAREN}
Token {  word: 10  type: LIME_NUMBER}
Token {  word: ,  type: LIME_COMMA}
Token {  word:    type: LIME_WHITESPACE}
Token {  word: 2  type: LIME_NUMBER}
Token {  word: )  type: LIME_CLOSE_PAREN}
Token {  word: \n  type: LIME_NEWLINE}
Token {  word: \n  type: LIME_NEWLINE}
Token {  word: if  type: }
Token {  word:    type: LIME_WHITESPACE}
Token {  word: myVar  type: LIME_IDENTIFIER}
Token {  word:    type: LIME_WHITESPACE}
Token {  word: ==  type: LIME_OPERATOR}
Token {  word:    type: LIME_WHITESPACE}
Token {  word: 12  type: LIME_NUMBER}
Token {  word:    type: LIME_WHITESPACE}
Token {  word: {  type: }
Token {  word: \n  type: LIME_NEWLINE}
Token {  word:    type: LIME_WHITESPACE}
Token {  word:    type: LIME_WHITESPACE}
Token {  word:    type: LIME_WHITESPACE}
Token {  word:    type: LIME_WHITESPACE}
Token {  word: $  type: LIME_METATAG}
Token {  word: emit  type: LIME_IDENTIFIER}
Token {  word: {  type: }
Token {  word: printf  type: LIME_IDENTIFIER}
Token {  word: (  type: LIME_OPEN_PAREN}
Token {  word: "Yass\n"  type: LIME_IDENTIFIER}
Token {  word: )  type: LIME_CLOSE_PAREN}
Token {  word: ;  type: LIME_IDENTIFIER}
Token {  word: }  type: }
Token {  word: \n  type: LIME_NEWLINE}
Token {  word: }  type: }
Token {  word: \n  type: LIME_NEWLINE}
Token {  word: \n  type: LIME_NEWLINE}
