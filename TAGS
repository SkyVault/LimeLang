
lime_types.cc,50
bool isType(const std::string& str) {isType3,25

lime_types.h,497
enum LimeTypes {LimeTypes6,48
    Unknown,Unknown7,65
    None,None9,79
    Uint8,Uint811,90
    Uint16,Uint1612,101
    Uint32,Uint3213,113
    Uint64,Uint6414,125
    Int8,Int816,138
    Int16,Int1617,148
    Int32,Int3218,159
    Int64,Int6419,170
    Float,Float21,182
    Float32,Float3222,193
    String,String24,207
    Boolean,Boolean25,219
    Num_TypesNum_Types27,233
static std::map<std::string, LimeTypes> LimeTypeStringMap = {LimeTypeStringMap30,251

lime_utils.cc,168
void LimeAssert(bool expression, int line_number, LimeErrorLevel lvl, const std::string& msg) {LimeAssert3,25
bool isNumber(const std::string& word) {isNumber7,150

lime_utils.h,136
enum LimeErrorLevel{ LimeErrorLevel7,71
    LimeError,LimeError8,93
    LimeWarning,LimeWarning9,108
    LimeNoteLimeNote10,125

main.cc,116
const auto code = std::string{R"LEAF(code15,214
#define LOG_TO_FILESLOG_TO_FILES23,317
int main() {main25,339

lime_c_gen.cc,197
void LimeCGen::compile_code_block(Node* node, const std::string indent) {compile_code_block5,67
void LimeCGen::compile_ast_to_c(Node* node, const std::string& out_file) {compile_ast_to_c37,895

out.c,0

lexer.cc,644
Token::Token()Token6,81
Token::Token(std::string word, LimeTokenTypes type, bool isWhiteSpace = false):Token11,106
Token::Token(const Token& token) {Token19,261
ostream& operator<<(ostream& os, const Token& token) {operator <<27,440
std::string Token::ToString() const {ToString33,553
const std::string LoadFileToString(const std::string& path){LoadFileToString43,817
vector<string> SplitTokensToWordsAndSymbols(const string& code){SplitTokensToWordsAndSymbols57,1056
vector<Token> WordsToTokens(const vector<string>& words) {WordsToTokens177,3903
vector<Token> TokenizeString(const std::string& code) {TokenizeString263,6763

lime_tests.h,215
std::tuple<bool, std::string> isNumberTests() {isNumberTests9,122
bool runTest(std::function<std::tuple<bool, std::string>()> fn, const std::string& name){runTest21,553
bool limeRunTests() {limeRunTests27,825

ast.cc,1719
Node::Node(Token& token) {Node6,135
Node::Node(){}Node16,365
Node* Node::add(Node* node) {add18,381
std::string Node::ToString(std::string indent = "") const {ToString23,461
ostream& operator<<(ostream& os, const Node& node) {operator <<60,1607
std::vector<Token> GetExpressionTokens(std::vector<Token>::iterator& it, std::vector<Token>::iterator end) {GetExpressionTokens66,1732
Node* HandleFunctionCall(std::vector<Token>::iterator begin) {HandleFunctionCall121,3418
Node* TokenToNode(Token& token) {TokenToNode125,3504
void SortExpression(Node* node){SortExpression147,4061
Node* PackExpression(std::vector<Token>::iterator it, std::vector<Token>::iterator end) {PackExpression207,5895
void get_all_within_tokens(std::vector<Token>::iterator& it, std::vector<Token>::iterator end, std::string tstart = "{", std::string tend = "}") {get_all_within_tokens277,8007
Node* parameters_to_node(std::vector<Token>& tokens) {parameters_to_node291,8393
Node* handle_function_call(std::vector<Token>::iterator& it, std::vector<Token>::iterator last) {handle_function_call347,10184
void code_block_to_ast(Node* ast, std::vector<Token>& tokens) {code_block_to_ast393,11634
CodeLens* GetCodeLens() { return Lens; }GetCodeLens678,20726
bool CodeLens::varExists(const std::string& name) {varExists680,20768
void CodeLens::addVar(Node* node) {addVar688,21000
bool CodeLens::procExists(const std::string& name) {procExists694,21221
void CodeLens::addProc(Node* node) {addProc700,21366
void CodeLens::push() {push706,21556
void CodeLens::pop() {pop710,21645
bool AstPass(Node* ast) {AstPass715,21747
Node create_ast_from_tokens(std::vector<Token>& tokens) {create_ast_from_tokens822,25230

lexer.h,1688
enum LimeTokenTypes {LimeTokenTypes13,173
	LIME_IDENTIFIER,LIME_IDENTIFIER14,195
	LIME_NUMBER,LIME_NUMBER15,213
	LIME_NEWLINE,LIME_NEWLINE16,227
	LIME_TABULAR,LIME_TABULAR17,242
	LIME_WHITESPACE,LIME_WHITESPACE18,257
	LIME_OPERATOR,LIME_OPERATOR19,275
    LIME_COMMA,LIME_COMMA20,291
    LIME_PROC,LIME_PROC22,308
    LIME_RETURN,LIME_RETURN23,323
    LIME_OPEN_PAREN,LIME_OPEN_PAREN25,341
    LIME_CLOSE_PAREN,LIME_CLOSE_PAREN26,362
    LIME_OPEN_CURLY_BRACKET,LIME_OPEN_CURLY_BRACKET28,385
    LIME_CLOSE_CURLY_BRACKET,LIME_CLOSE_CURLY_BRACKET29,414
    LIME_MUTABLE,LIME_MUTABLE31,445
    LIME_TYPE_IDENTIFIER,LIME_TYPE_IDENTIFIER33,464
    LIME_WHILE, LIME_WHILE35,491
    LIME_FOR,LIME_FOR36,508
    LIME_IF,LIME_IF38,523
	LIME_NUM_TOKENSLIME_NUM_TOKENS40,537
enum LimeOperators {LimeOperators43,558
	LIME_ASSIGNMENT_OPERATOR,LIME_ASSIGNMENT_OPERATOR44,579
	LIME_PLUS_OPERATOR,LIME_PLUS_OPERATOR45,606
	LIME_MINUS_OPERATOR,LIME_MINUS_OPERATOR46,627
	LIME_MULTIPLICATION_OPERATOR,LIME_MULTIPLICATION_OPERATOR47,649
	LIME_DIVISION_OPERATOR,LIME_DIVISION_OPERATOR48,680
    LIME_COMPAIRISON_OPERATOR,LIME_COMPAIRISON_OPERATOR50,706
    LIME_GREATER_EQUAL_OPERATOR,LIME_GREATER_EQUAL_OPERATOR51,737
    LIME_LESS_EQUAL_OPERATOR,LIME_LESS_EQUAL_OPERATOR52,770
    LIME_GREATER,LIME_GREATER53,800
    LIME_LESS,LIME_LESS54,818
    LIME_NOT_EQUAL_OPERATOR,LIME_NOT_EQUAL_OPERATOR55,833
	LIME_NONE_OPERATORLIME_NONE_OPERATOR57,863
static const std::map<LimeTokenTypes, const std::string> LimeTokenTypesNames = {LimeTokenTypesNames60,887
struct Token {Token85,1566
typedef std::vector<Token> TokenList;TokenList105,2020

lime_c_gen.h,435
const std::string TypeDefs = R"TYPEDEFS(TypeDefs10,108
struct LimeCGen {LimeCGen29,559
    std::stringstream code, gfdef, gfprot, gvd, header;code34,727
    std::stringstream code, gfdef, gfprot, gvd, header;gfdef34,727
    std::stringstream code, gfdef, gfprot, gvd, header;gfprot34,727
    std::stringstream code, gfdef, gfprot, gvd, header;gvd34,727
    std::stringstream code, gfdef, gfprot, gvd, header;header34,727

Makefile,264
CC=g++CC1,0
CCFLAGS=-std=c++17 -Wall -g -Wno-unused-function -Wno-unused-variable -Wno-unused-parameterCCFLAGS2,7
LDFLAGS=-lrt -lpthread -lmLDFLAGS3,99
SOURCES=$(wildcard *.cc)SOURCES4,126
OBJECTS=$(SOURCES:.cc=.o)OBJECTS5,151
	TARGET=a.outTARGET6,177

lime.h,959
#define MAJOR_VERSION MAJOR_VERSION2,13
#define MINOR_VERSION MINOR_VERSION3,39
#define REVISION_VERISON REVISION_VERISON4,65
#define LIME_VERSION LIME_VERSION6,95
#define COLORED_OUTPUTCOLORED_OUTPUT8,171
enum class ansi_color_code: int{ansi_color_code17,307
    black = 30,black18,340
    red=31,red19,356
    green=32,green20,368
    yellow=33,yellow21,382
    blue=34,blue22,397
    magenta=35,magenta23,410
    cyan=36,cyan24,426
    white=37,white25,439
    bright_black = 90,bright_black26,453
    bright_red=91,bright_red27,476
    bright_green=92,bright_green28,495
    bright_yellow=93,bright_yellow29,516
    bright_blue=94,bright_blue30,538
    bright_magenta=95,bright_magenta31,558
    bright_cyan=96,bright_cyan32,581
    bright_white=97,bright_white33,601
static void print_as_color(printable const& value, ansi_color_code color){print_as_color37,655
const std::string char_set = char_set43,883

ast.h,2173
enum NodeType {NodeType12,149
    LIME_NODE_NONE,LIME_NODE_NONE13,165
    LIME_NODE_VARIABLE_DECLARATION,LIME_NODE_VARIABLE_DECLARATION14,185
    LIME_NODE_VARIABlE_ASSIGNMENT,LIME_NODE_VARIABlE_ASSIGNMENT15,221
    LIME_NODE_EXPRESSION,LIME_NODE_EXPRESSION16,256
    LIME_NODE_NUMBER_LITERAL,LIME_NODE_NUMBER_LITERAL17,282
    LIME_NODE_OPERATOR,LIME_NODE_OPERATOR18,312
    LIME_NODE_CODE_BLOCK,LIME_NODE_CODE_BLOCK19,336
    LIME_NODE_IDENTIFIER,LIME_NODE_IDENTIFIER20,362
    LIME_NODE_PROC_CALL,LIME_NODE_PROC_CALL21,388
    LIME_NODE_PROC_DEFINITION,LIME_NODE_PROC_DEFINITION22,413
    LIME_NODE_PROC_DECLARATION,LIME_NODE_PROC_DECLARATION23,444
    LIME_NODE_ARGUMENT_LIST,LIME_NODE_ARGUMENT_LIST24,476
    LIME_NODE_PARAMETER_LIST,LIME_NODE_PARAMETER_LIST25,505
    LIME_NODE_WHILE_LOOP,LIME_NODE_WHILE_LOOP26,535
    LIME_NODE_IF_STATEMENT,LIME_NODE_IF_STATEMENT27,561
    LIME_NODE_RETURN,LIME_NODE_RETURN28,589
static const std::map<NodeType, const std::string> LimeNodeTypesNames = {LimeNodeTypesNames31,615
enum OrderOfPrecedence {OrderOfPrecedence50,1434
    Comma,Comma51,1459
    PlusEqual,PlusEqual52,1470
    MinusEqual,MinusEqual53,1485
    TimesEqual,TimesEqual54,1501
    DivideEqual,DivideEqual55,1517
    ModEqual,ModEqual56,1534
    Equals,Equals57,1548
    GreaterThan,GreaterThan58,1560
    GreaterThanOrEqual,GreaterThanOrEqual59,1577
    LessThan,LessThan60,1601
    LessThanOrEqual,LessThanOrEqual61,1615
    NotEqual,NotEqual62,1636
    Sub,Sub63,1650
    Add,Add64,1659
    Mod,Mod65,1668
    Div,Div66,1677
    Mult,Mult67,1686
    UnaryMinus,UnaryMinus68,1696
    UnaryPlusUnaryPlus69,1712
static const std::map<std::string, OrderOfPrecedence> OrderOfPrecedenceTable = {OrderOfPrecedenceTable72,1730
struct Node {Node92,2266
    Token token;token96,2317
    std::vector<Node*> children;children102,2423
typedef Node Ast;Ast125,3006
struct CodeLens {CodeLens127,3025
    std::vector<std::map<std::string, Node*>> variable_scope;variable_scope128,3043
    std::map<std::string, Node*> functions;functions129,3105
static CodeLens* Lens;Lens141,3339

lime.cc,114
void Error(std::string message, int line_number = 1) {Error4,38
std::string gen_uuid(int num) {gen_uuid21,463
