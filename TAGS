
lime_types.cc,50
bool isType(const std::string& str) {isType3,25

lime_types.h,497
enum LimeTypes {LimeTypes6,48
    Unknown,Unknown7,65
    None,None9,79
    Uint8,Uint811,90
    Uint16,Uint1612,101
    Uint32,Uint3213,113
    Uint64,Uint6414,125
    Int8,Int816,138
    Int16,Int1617,148
    Int32,Int3218,159
    Int64,Int6419,170
    Float,Float21,182
    Float32,Float3222,193
    String,String24,207
    Boolean,Boolean25,219
    Num_TypesNum_Types27,233
static std::map<std::string, LimeTypes> LimeTypeStringMap = {LimeTypeStringMap30,251

lime_utils.cc,168
void LimeAssert(bool expression, int line_number, LimeErrorLevel lvl, const std::string& msg) {LimeAssert3,25
bool isNumber(const std::string& word) {isNumber7,150

lime_utils.h,136
enum LimeErrorLevel{ LimeErrorLevel7,71
    LimeError,LimeError8,93
    LimeWarning,LimeWarning9,108
    LimeNoteLimeNote10,125

main.cc,151
const auto code = std::string{R"LEAF(code14,196
#define RUN_TESTSRUN_TESTS29,337
#define LOG_TO_FILESLOG_TO_FILES30,355
int main() {main32,377

lime_c_gen.cc,169
void LimeCGen::compile_code_block(Node* node) {compile_code_block4,43
void LimeCGen::compile_ast_to_c(Node* node, const std::string& out_file) {compile_ast_to_c8,99

out.c,0

lexer.cc,644
Token::Token()Token6,81
Token::Token(std::string word, LimeTokenTypes type, bool isWhiteSpace = false):Token11,106
Token::Token(const Token& token) {Token19,261
ostream& operator<<(ostream& os, const Token& token) {operator <<27,440
std::string Token::ToString() const {ToString33,553
const std::string LoadFileToString(const std::string& path){LoadFileToString43,817
vector<string> SplitTokensToWordsAndSymbols(const string& code){SplitTokensToWordsAndSymbols57,1056
vector<Token> WordsToTokens(const vector<string>& words) {WordsToTokens175,3831
vector<Token> TokenizeString(const std::string& code) {TokenizeString261,6693

lime_tests.h,215
std::tuple<bool, std::string> isNumberTests() {isNumberTests9,122
bool runTest(std::function<std::tuple<bool, std::string>()> fn, const std::string& name){runTest21,553
bool limeRunTests() {limeRunTests27,825

ast.cc,1678
Node::Node(Token& token) {Node6,135
Node::Node(){}Node16,365
std::string Node::ToString(std::string indent = "") const {ToString18,381
ostream& operator<<(ostream& os, const Node& node) {operator <<55,1527
std::vector<Token> GetExpressionTokens(std::vector<Token>::iterator& it, std::vector<Token>::iterator end) {GetExpressionTokens61,1652
Node* HandleFunctionCall(std::vector<Token>::iterator begin) {HandleFunctionCall116,3338
Node* TokenToNode(Token& token) {TokenToNode120,3424
void SortExpression(Node* node){SortExpression142,3981
Node* PackExpression(std::vector<Token>::iterator it, std::vector<Token>::iterator end) {PackExpression202,5815
void get_all_within_tokens(std::vector<Token>::iterator& it, std::vector<Token>::iterator end, std::string tstart = "{", std::string tend = "}") {get_all_within_tokens273,7981
Node* parameters_to_node(std::vector<Token>& tokens) {parameters_to_node287,8367
Node* handle_function_call(std::vector<Token>::iterator& it, std::vector<Token>::iterator last) {handle_function_call343,10158
void code_block_to_ast(Node* ast, std::vector<Token>& tokens) {code_block_to_ast389,11608
CodeLens* GetCodeLens() { return Lens; }GetCodeLens661,20237
bool CodeLens::varExists(const std::string& name) {varExists663,20279
void CodeLens::addVar(Node* node) {addVar671,20511
bool CodeLens::procExists(const std::string& name) {procExists677,20732
void CodeLens::addProc(Node* node) {addProc683,20877
void CodeLens::push() {push689,21067
void CodeLens::pop() {pop693,21156
bool AstPass(Node* ast) {AstPass698,21258
Node create_ast_from_tokens(std::vector<Token>& tokens) {create_ast_from_tokens790,24311

lexer.h,1652
enum LimeTokenTypes {LimeTokenTypes13,173
	LIME_IDENTIFIER,LIME_IDENTIFIER14,195
	LIME_NUMBER,LIME_NUMBER15,213
	LIME_NEWLINE,LIME_NEWLINE16,227
	LIME_TABULAR,LIME_TABULAR17,242
	LIME_WHITESPACE,LIME_WHITESPACE18,257
	LIME_OPERATOR,LIME_OPERATOR19,275
    LIME_COMMA,LIME_COMMA20,291
    LIME_PROC,LIME_PROC22,308
    LIME_OPEN_PAREN,LIME_OPEN_PAREN24,324
    LIME_CLOSE_PAREN,LIME_CLOSE_PAREN25,345
    LIME_OPEN_CURLY_BRACKET,LIME_OPEN_CURLY_BRACKET27,368
    LIME_CLOSE_CURLY_BRACKET,LIME_CLOSE_CURLY_BRACKET28,397
    LIME_MUTABLE,LIME_MUTABLE30,428
    LIME_TYPE_IDENTIFIER,LIME_TYPE_IDENTIFIER32,447
    LIME_WHILE, LIME_WHILE34,474
    LIME_FOR,LIME_FOR35,491
    LIME_IF,LIME_IF37,506
	LIME_NUM_TOKENSLIME_NUM_TOKENS39,520
enum LimeOperators {LimeOperators42,541
	LIME_ASSIGNMENT_OPERATOR,LIME_ASSIGNMENT_OPERATOR43,562
	LIME_PLUS_OPERATOR,LIME_PLUS_OPERATOR44,589
	LIME_MINUS_OPERATOR,LIME_MINUS_OPERATOR45,610
	LIME_MULTIPLICATION_OPERATOR,LIME_MULTIPLICATION_OPERATOR46,632
	LIME_DIVISION_OPERATOR,LIME_DIVISION_OPERATOR47,663
    LIME_COMPAIRISON_OPERATOR,LIME_COMPAIRISON_OPERATOR49,689
    LIME_GREATER_EQUAL_OPERATOR,LIME_GREATER_EQUAL_OPERATOR50,720
    LIME_LESS_EQUAL_OPERATOR,LIME_LESS_EQUAL_OPERATOR51,753
    LIME_GREATER,LIME_GREATER52,783
    LIME_LESS,LIME_LESS53,801
    LIME_NOT_EQUAL_OPERATOR,LIME_NOT_EQUAL_OPERATOR54,816
	LIME_NONE_OPERATORLIME_NONE_OPERATOR56,846
static const std::map<LimeTokenTypes, const std::string> LimeTokenTypesNames = {LimeTokenTypesNames59,870
struct Token {Token83,1519
typedef std::vector<Token> TokenList;TokenList103,1973

lime_c_gen.h,32
struct LimeCGen {LimeCGen7,69

Makefile,264
CC=g++CC1,0
CCFLAGS=-std=c++17 -Wall -g -Wno-unused-function -Wno-unused-variable -Wno-unused-parameterCCFLAGS2,7
LDFLAGS=-lrt -lpthread -lmLDFLAGS3,99
SOURCES=$(wildcard *.cc)SOURCES4,126
OBJECTS=$(SOURCES:.cc=.o)OBJECTS5,151
	TARGET=a.outTARGET6,177

lime.h,913
#define MAJOR_VERSION MAJOR_VERSION2,13
#define MINOR_VERSION MINOR_VERSION3,39
#define REVISION_VERISON REVISION_VERISON4,65
#define LIME_VERSION LIME_VERSION6,95
#define COLORED_OUTPUTCOLORED_OUTPUT8,171
enum class ansi_color_code: int{ansi_color_code14,253
    black = 30,black15,286
    red=31,red16,302
    green=32,green17,314
    yellow=33,yellow18,328
    blue=34,blue19,343
    magenta=35,magenta20,356
    cyan=36,cyan21,372
    white=37,white22,385
    bright_black = 90,bright_black23,399
    bright_red=91,bright_red24,422
    bright_green=92,bright_green25,441
    bright_yellow=93,bright_yellow26,462
    bright_blue=94,bright_blue27,484
    bright_magenta=95,bright_magenta28,504
    bright_cyan=96,bright_cyan29,527
    bright_white=97,bright_white30,547
static void print_as_color(printable const& value, ansi_color_code color){print_as_color34,601

ast.h,2127
enum NodeType {NodeType12,149
    LIME_NODE_NONE,LIME_NODE_NONE13,165
    LIME_NODE_VARIABLE_DECLARATION,LIME_NODE_VARIABLE_DECLARATION14,185
    LIME_NODE_VARIABlE_ASSIGNMENT,LIME_NODE_VARIABlE_ASSIGNMENT15,221
    LIME_NODE_EXPRESSION,LIME_NODE_EXPRESSION16,256
    LIME_NODE_NUMBER_LITERAL,LIME_NODE_NUMBER_LITERAL17,282
    LIME_NODE_OPERATOR,LIME_NODE_OPERATOR18,312
    LIME_NODE_CODE_BLOCK,LIME_NODE_CODE_BLOCK19,336
    LIME_NODE_IDENTIFIER,LIME_NODE_IDENTIFIER20,362
    LIME_NODE_PROC_CALL,LIME_NODE_PROC_CALL21,388
    LIME_NODE_PROC_DEFINITION,LIME_NODE_PROC_DEFINITION22,413
    LIME_NODE_PROC_DECLARATION,LIME_NODE_PROC_DECLARATION23,444
    LIME_NODE_ARGUMENT_LIST,LIME_NODE_ARGUMENT_LIST24,476
    LIME_NODE_PARAMETER_LIST,LIME_NODE_PARAMETER_LIST25,505
    LIME_NODE_WHILE_LOOP,LIME_NODE_WHILE_LOOP26,535
    LIME_NODE_IF_STATEMENT,LIME_NODE_IF_STATEMENT27,561
static const std::map<NodeType, const std::string> LimeNodeTypesNames = {LimeNodeTypesNames30,593
enum OrderOfPrecedence {OrderOfPrecedence48,1379
    Comma,Comma49,1404
    PlusEqual,PlusEqual50,1415
    MinusEqual,MinusEqual51,1430
    TimesEqual,TimesEqual52,1446
    DivideEqual,DivideEqual53,1462
    ModEqual,ModEqual54,1479
    Equals,Equals55,1493
    GreaterThan,GreaterThan56,1505
    GreaterThanOrEqual,GreaterThanOrEqual57,1522
    LessThan,LessThan58,1546
    LessThanOrEqual,LessThanOrEqual59,1560
    NotEqual,NotEqual60,1581
    Sub,Sub61,1595
    Add,Add62,1604
    Mod,Mod63,1613
    Div,Div64,1622
    Mult,Mult65,1631
    UnaryMinus,UnaryMinus66,1641
    UnaryPlusUnaryPlus67,1657
static const std::map<std::string, OrderOfPrecedence> OrderOfPrecedenceTable = {OrderOfPrecedenceTable70,1675
struct Node {Node90,2211
    Token token;token94,2262
    std::vector<Node*> children;children100,2368
typedef Node Ast;Ast121,2923
struct CodeLens {CodeLens123,2942
    std::vector<std::map<std::string, Node*>> variable_scope;variable_scope124,2960
    std::map<std::string, Node*> functions;functions125,3022
static CodeLens* Lens;Lens137,3256

lime.cc,66
void Error(std::string message, int line_number = 1) {Error3,19
